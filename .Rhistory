apply(b, c(1,2), sum)
apply(b, 3, sum)
apply(b, 2, sum)
apply(b, c(1,2,3), sum)
apply(b, c(1), sum)
apply(b, c(2), sum)
rowmeans(b, dims=2)
rowMeans(b, dims=2)
rowMeans(b, dims=1)
?rowMeans
rowMeans(b, dims=0)
rowMeans(b, dims=1)
rowMeans(b, dims=2)
rowMeans(b, dims=3)
mapply(rep, 1:5, 3)
mapply(rep, 1:5, 1:3)
mapply(rep, 1:5, 1:5)
mapply(rep, 1:5, 5:1)
rnorm(10)
rnorm(10,1)
gl(1,20)
?gl
gl(3,20)
bc = gl(3,10)
bcv
bc
x = c(rnorm(10), rnorm(10), rnorm(10))
x
split(x,bc)
lapply(split(x,bc), sum)
tapply(x,bc,sum)
library(datasets)
head(airquality)
split(airquality, airquality$Month)
splt = split(airquality, airquality$Month)
lapply(splt, function(x) colMeans(x[,c("Ozone")]))
lapply(splt, function(x) colMeans(x[,c("Ozone"))]))
lapply(splt, function(x) colMeans(x[,c("Ozone"))])
lapply(splt, function(x) colMeans(x[,c("Ozone"))])
lapply(splt, function(x) colMeans(x[,c("Ozone"))]))
lapply(splt, function(x) colMeans(x[, c("Ozone")]))
lapply(splt, function(x) colMeans(x[, c("Ozone", "Temp")]))
lapply(splt, function(x) colMeans(x[, c("Ozone", "Temp")]))
fa = gl(2,5)
fa
fb = gl(5,2)
fb
interaction(fa,fb)
fc = interaction(fa,fb)
fc
str(fc)
?str
?gl
list(fa,fb)
?list
data(iris)
?iris
iris
iris$sepal.Length
print(iris)
print(iris)
print(iris[,"Sepal.Length"])
print(iris[,"Sepal.Length"])
?filter
?equals
?equal
print(iris[,iris?Sepal.Length == 6.2])
print(iris[,iris?Sepal.Length])
print(iris[,iris?Sepal\.Length])
print(iris[,"Sepal\.Length"])
print(iris[,"Sepal.Length"])
print(iris[iris?Species="virginica"])
print(iris[iris?Species=="virginica"])
print(iris[iris?species=="virginica"])
print(iris)
print(iris[species=="virginica"])
print(iris[species=="virginica"])
subset(iris, species=="virginica")
subset(iris, species=="virginica")
subset(iris, species="virginica")
subset(iris, species=="virginica")
subset(iris, species==virginica)
str(iris)
subset(iris, pecies==virginica)
subset(iris, Species==virginica)
iris[, Species]
iris[, Sepal.Length]
iris[, 4]
iris[, $Sepal.Length]
iris[, iris$Sepal.Length]
print(iris[,"Sepal.Length"])
iris[, "Sepal.Length]
;
""
;
\""
iris[, "Sepal.Length"]
iris[, "Species"]
iris[, "Species" == "virginica"]
iris[, "Species" == virginica]
iris[, "Sepal.Length"]
iris[, "Sepal.Length" > 5]
iris[ "Sepal.Length" > 5]
iris[ "Sepal.Length" ]
iris[ , "Sepal.Length" ]
iris[ , "Species" ]
iris[ , "Species" ]
iris[ , "Species" ]=="virginica"
vir = iris[ , "Species" ]=="virginica"
iris[vir]
iris[,vir]
iris[vir,]
iris[vir,"Sepal.Length]
\""
\
iris[vir,"Sepal.Length"]
split(iris)
str(iris)
str(ss)
iris[ , "Species" ]=="virginica"
iris[ "Species", ]=="virginica"
iris[ ,"Species" ]=="virginica"
split(iris, iris$Species)
split(iris, iris$Species) == "virginia"
spec = split(iris, iris$Species)
spec?virginica
str(spec)
lapply(spec, function(x) colMeans(x[,c("Sepal.Length")]))
lapply(spec, function(x) colMeans(x[,c("Sepal.Length", "Species")]))
lapply(spec, function(x) colMeans(x[,c("Sepal.Length", "Sepal.Width")]))
sapply(spec, function(x) colMeans(x[,c("Sepal.Length", "Sepal.Width")]))
apply(iris, 2, mean)
apply(iris[1:4], 2, mean)
apply(iris[,1:4], 2, mean)
apply(iris[,1:4], 1, mean)
data(mtcars)
?mtcars
mtcars
str(mtcars)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
apply(iris[,1:4], 1, mean)
apply(iris, 2, mean)
apply(iris[,1:4], 1, mean)
sapply(spec, function(x) colMeans(x[,c("Sepal.Length", "Sepal.Width")]))
lapply(spec, function(x) colMeans(x[,c("Sepal.Length")]))
iris[vir,"Sepal.Length]
""
"
iris[vir,"Sepal.Length"]
mean(iris[vir,"Sepal.Length"])
matrix(1)
matrix(2,2)
matrix(2,2,4,4)
?<<
?<<-
? <<
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(c(1:4))
makeVector(c(1:4))
xx = makeVector(c(1:4))
cachemean(xx)
cachemean(xx)
?set
??set
library(swirl)
library(Swirl)
install.packages(Swirl)
install.packages(swirl)
install.packages("Swirl"")
""
install.packages("Swirl")
install.packages("swirl")
library(swirl)
swirl()
swirl()
swirl()
library(swirl)
swirl()
?by
source('~/R/rankall.R')
data <- read.csv("~/R/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv", colClasses="character")
filtereddata <- subset(data, select = c(1, 2, 11, State))
names(filtereddata) <- c("Num", "Name", "Rate", "State")
filtereddata$Rate <- as.numeric(filtereddata$Rate)
data_no_na <- filtereddata[complete.cases(filtereddata),]
by(data_no_na[2:4], )
?order
source('~/R/rankall.R')
ordered_data <- filtereddata[order(State, Rate, Name),]
source('~/R/rankall.R')
source('~/R/rankall.R')
ordered_data <- filtereddata[order(State, Rate, Name),]
ordered_data <- filtereddata[order("State", "Rate", "Name"),]
source('~/R/rankall.R')
ordered_data <- filtereddata[,order("State", "Rate", "Name")]
ordered_data <- filtereddata[order(State, Rate, Name),]
ordered_data <- filtereddata[order("State", "Rate", "Name"),]
View(ordered_data)
ordered_data <- filtereddata[,order("State", "Rate", "Name"),]
save.image("~/R/Saved.RData")
ordered_data <- filtereddata[order(State, Rate, Name),]
colNames(filtereddata)
colnames(filtereddata)
ordered_data <- filtereddata[order(State, Rate, Name),]
ordered_data <- filtereddata[order(Rate, Name),]
str(filtereddata)
ordered_data <- filtereddata[order(filtreddata$Rate, Name),]
?order
str(filtereddata)
filtereddata[order(Rate, Name),]
filtereddata[order(2, 3),]
filtereddata[,order(2, 3)]
source('~/R/rankall.R')
ordered_data <- filtereddata[ order(4, 3, 2), ]
ordered_data <- filtereddata[ ,order(4, 3, 2), ]
str(filtereddata)
ordered_data <- data[ order(4, 3, 2), ]
attach(mtcars)
# sort by mpg
newdata <- mtcars[order(mpg),]
str(mtcars)
str(data)
data[order(Footnote),]
attach(mtcars)
# sort by mpg
newdata <- mtcars[order(mpg),]
newdata <- mtcars[order(mpg),]
data[order(State),]
names(data)
names(mtcats)
names(mtcars
)
View(mtcars)
data <- read.csv("~/R/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv", colClasses="character")
data[order(State),]
debug(order())
debug(order)
data[order(State),]
stack
trace()
traceback
traceback()
data[order(State),]
?xyplot
xyplot
library(lattice)
xyplot
xyplot()
?xyplot
library(nlme)
xyplot(weight ~ Time)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet)
xyplot(weight ~ Time | Diet,Bodyweight)
xyplot(weight ~ Time | Diet, Bodyweight)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, Bodyweight)
xyplot(weight ~ Time | Diet, BodyWeight)
str(nlme)
nlme
head(nlme)
head(BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
p<-xyplot(weight ~ Time | Diet, BodyWeight)
print(p)
print(p)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
install.packages(ggplot2)
install.packages(ggplot)
install.packages('ggplot2')
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
install.packages('sensitivity')
library(sensitivity)
?sensitivity
library(rjson)
?rjson
?rjson-package
library(jsonlite)
toJSON
?toJSON
install.packages('jsonlite')
install.packages("jsonlite")
?toJSON
toJSON
?jsonlite
jsonlite
library(jsonlite)
toJSON
?toJSON
setwd("~/R/Reproducible/RepData_PeerAssessment1")
ls
ls;
ls()
list.files
list.files()
open("PA1_template.Rmd")
install.packages('knitr')
install.packages('rmarkdown')
library(csv)
library(xls)
steps <- read.csv(file= "activity/activity.csv", header = TRUE);
open(steps)
View(steps)
library(knitr)
str(steps)
library(dplyr,knitr)
library(dplyr,knitr)
library(ggplot2)
library(ggplot2)
library(knitr, dplyr, ggplot2);
str(steps)
steps$date <- as.Date(steps$date)
str(steps)
?aggregate
total_mean <- aggregate(steps ~ date, steps, mean, na.omit)
total_mean <- aggregate(steps ~ date, steps, mean)
total_mean <- aggregate(steps ~ date, steps, mean, na.omit)
total_mean <- aggregate(steps ~ date, steps, mean)
total_mean
str(total_mean)
mean(total_mean$steps)
hist(total_mean)
hist(total_mean$steps)
total_mean <- aggregate(steps ~ date, steps, sum)
hist(total_mean$steps)
ggplot(total_mean, aes(steps)) + geom_histogram()
dplyr::summarise(group_by(steps, interval), mean(steps$steps))
s<-steps
dplyr::summarise(group_by(s, interval), mean(steps))
dplyr::summarise(group_by(s, interval), mean(steps), na.rm=TRUE)
dplyr::summarise(group_by(s, interval, na.omit), mean(steps))
dplyr::summarise(group_by(s, interval), mean(steps))
ggplot(daily_pattern, aes(interval, steps) + geom_line(size=1 ) + labs(x="interval", y="steps", title="Daily pattern");
daily_pattern <- dplyr::summarise(group_by(s, interval), mean(steps));
ggplot(daily_pattern, aes(interval, steps) + geom_line(size=1 ) + labs(x="interval", y="steps", title="Daily pattern");
ggplot(daily_pattern, aes(interval, steps)) + geom_line(size=1 ) + labs(x="interval", y="steps", title="Daily pattern")
ggplot(daily_pattern, aes(steps)) + geom_line(size=1 ) + labs(x="interval", y="steps", title="Daily pattern")
ggplot(daily_pattern, aes(steps)) + geom_line() + labs(x="interval", y="steps", title="Daily pattern")
ggplot(daily_pattern, aes(steps)) + geom_line() + labs(x="interval", y="steps", title="Daily pattern");
head(daily_pattern)
ggplot(daily_pattern, aes(mean(steps)) + geom_line() + labs(x="interval", y="steps", title="Daily pattern");
ggplot(daily_pattern, aes(mean(steps))) + geom_line() + labs(x="interval", y="steps", title="Daily pattern");
daily_pattern <- s dplyr::%>% group_by(interval) dplyr::%>% summarize(steps=mean(steps));
head(daily_pattern);
daily_pattern <- s dplyr::%>% group_by(interval) dplyr::%>% summarize(steps=mean(steps));
daily_pattern <- s %>% group_by(interval) %>% summarize(steps=mean(steps));
daily_pattern <- s dplyr::%>% group_by(interval) dplyr::%>% summarize(steps=mean(steps));
head(daily_pattern);
ggplot(daily_pattern, aes(steps)) + geom_line(size=2) + labs(x="interval", y="steps", title="Daily pattern");
ggplot(daily_pattern, aes(x=steps, y=interval)) + geom_line(size=2) + labs(x="interval", y="steps", title="Daily pattern");
ggplot(daily_pattern, aes(steps)) + geom_histogram() + labs(x="interval", y="steps", title="Daily pattern");
ggplot(daily_pattern, aes(steps)) + geom_histogram() + labs(x="interval", y="steps", title="Daily pattern");
ggplot(total_per_day, aes(steps)) + geom_histogram() + labs(x="total steps", y="intervals per day", title="Total sum of the steps per day" );
ggplot(total_mean, aes(steps)) + geom_histogram() + labs(x="total steps", y="intervals per day", title="Total sum of the steps per day" );
str(total_mean)
str(total_per_day)
str(daily_pattern)
head(daily_pattern)
head(total_mean)
total_mean[1]
total_mean
daily_pattern[1]
daily_pattern
str(daily_pattern)
str(as.data.frame(daily_pattern))
ggplot(as.data.frame(daily_pattern), aes(steps)) + geom_histogram() + labs(x="interval", y="steps", title="Daily pattern");
str(as.data.frame(daily_pattern))
daily_pattern
str(as.data.frame(daily_pattern))
ggplot(as.data.frame(daily_pattern), aes(steps)) + geom_histogram() + labs(x="interval", y="steps", title="Daily pattern");
daily_pattern <- data %>% group_by(interval) %>% summarize(step=mean(steps)) %>% ggplot(aes(step)) + geom_histogram();
daily_pattern <- s %>% group_by(interval) %>% summarize(step=mean(steps)) %>% ggplot(aes(step)) + geom_histogram();
group_by(interval) %>% summarize(step=mean(steps)) %>% ggplot(aes(step)) + geom_histogram();
s%>% group_by(interval) %>% summarize(step=mean(steps)) %>% ggplot(aes(step)) + geom_histogram();
s%>% group_by(interval) %>% summarize(mean(steps)) %>% ggplot(aes(mean(steps))) + geom_histogram();
s%>% group_by(interval) %>% summarize(mean(steps, na.rm=TRUE)) %>% ggplot(aes(mean(steps))) + geom_histogram();
s%>% group_by(interval) %>% summarize(mean(steps, na.omit)) %>% ggplot(aes(mean(steps))) + geom_histogram();
s%>% group_by(interval) %>% summarize(mean(steps, na.omit)) %>% ggplot(aes(mean(steps))) + geom_histogram();
st < na.omit(s)
st <- na.omit(s)
st%>% group_by(interval) %>% summarize(mean(steps)) %>% ggplot(aes(mean(steps))) + geom_histogram();
ste <- st%>% group_by(interval) %>% summarize(mean(steps))
ste
agg <- aggregate(steps ~ interval, st, mean)
agg
hist(agg$steps)
ggplot(agg, aes(x=interval, y=steps)) + geom_line()
max(agg$steps)
max(agg$steps)
max.col(agg$steps)
which.max(agg$steps)
agg[,which.max(agg$steps)]
agg[which.max(agg$steps)]
agg[which.max(agg$steps),]
s %>% group_by(date) %>% mutate(steps= ifelse(is.na(steps)), mean(steps, na.rm=TRUE), steps));
s %>% group_by(date) %>% mutate(steps= ifelse(is.na(steps)), mean(steps, na.rm=TRUE), steps);
s %>% group_by(date) %>% mutate(steps= ifelse(is.na(steps)), yes=mean(steps, na.rm=TRUE), noo=steps);
s %>% group_by(date) %>% mutate(steps= ifelse(is.na(steps)), yes=mean(steps, na.rm=TRUE), no=steps);
s %>% group_by(date) %>% mutate(steps= ifelse(is.na(steps), yes=mean(steps, na.rm=TRUE), no=steps);
s %>% group_by(date) %>% mutate(steps= ifelse(is.na(steps), yes=mean(steps, na.rm=TRUE), no=steps))
str(s)
s %>% group_by(date) %>% mutate(steps= ifelse(is.na(steps), mean(steps, na.rm=TRUE), steps))
s %>% group_by(date) %>% mutate(steps= ifelse(is.na(steps), mean(steps, na.rm=TRUE), steps))
s
s %>% group_by(date) %>% mutate(steps= ifelse(is.na(steps), mean(steps, na.rm=TRUE), steps))
s %>% group_by(date) %>% mutate(steps= as.numeric(ifelse(is.na(steps), mean(steps, na.rm=TRUE), steps))
)
s %>% group_by(interval) %>% mutate(steps= as.numeric(ifelse(is.na(steps), mean(steps, na.rm=TRUE), steps))
)
isWeekday
library(timeDate)
install.packages('timeDate')
isWeekday
library(timeDate)
isWeekday
isWeekday(st$date)
st[isWeekday(st$date)]
isWeekday(st$date)
filter(st, isWeekday(st$date) == TRUE)
wk = filter(st, isWeekday(st$date) == TRUE)
weekdays()
weekdays(st$date)
wk = mutate(st, day=ifelse(isWeekday(st$date) == TRUE, "weekday", "weekend"))
wk
wk = mutate(st, day=ifelse(isWeekday(st$date) == TRUE, "weekday", "weekend"))
ggplot(wk, aes(steps, interval)) + geom_line()
ggplot(wk, aes(interval, steps)) + geom_line()
ggplot(wk, aes(interval, steps)) + geom_line() +facet_grid(. ~ day)
ggplot(wk, aes(interval, steps)) + geom_line() +facet_grid(day ~ .)
ggplot(wk, aes(interval, steps)) + geom_line() +facet_grid(day ~ .)
wk_mean = aggregate(steps ~ interval, wk, mean)
wk_mean
wk_mean = aggregate(steps ~ interval, wk$weekday, mean)
wk_mean = aggregate(steps ~ interval, wk$day, mean)
wk_mean = aggregate(steps ~ list(interval, day), wk, mean)
wk_mean = aggregate(steps, group_by(interval, day), wk, mean)
wk_mean = aggregate(steps, data= wk, group_by(interval, day), mean)
isWeekday
data <- s
data <- mutate(data, day=ifelse(isWeekday(data$date) == TRUE, "weekday", "weekend"));
head(data)
intervals <- data %>% group_by(interval, day) %>% summarise(steps=mean(steps))
intervals
install.packages('timeDate')
install.packages("timeDate")
library(package =  timeDate)
data2 <- data
data2 %>% group_by(interval) %>% mutate(steps= as.numeric(ifelse(is.na(steps), mean(steps, na.rm=TRUE), steps)));
library(dplyr)
data2 <- data
data2 %>% group_by(interval) %>% mutate(steps= as.numeric(ifelse(is.na(steps), mean(steps, na.rm=TRUE), steps)));
data2 <- mutate(data2, day=ifelse(isWeekday(data$date) == TRUE, "weekday", "weekend"));
#weekdays <- filter(data, isweekday(st$date) == TRUE);
#weekends <- filter(data, isweekend(st$date) == TRUE);
intervals <- data2 %>% group_by(interval, day) %>% summarise(steps=mean(steps));
ggplot(intervals, aes(interval, steps)) + geom_line() ;
library(ggplot2)
data2 <- mutate(data2, day=ifelse(isWeekday(data$date) == TRUE, "weekday", "weekend"));
#weekdays <- filter(data, isweekday(st$date) == TRUE);
#weekends <- filter(data, isweekend(st$date) == TRUE);
intervals <- data2 %>% group_by(interval, day) %>% summarise(steps=mean(steps));
ggplot(intervals, aes(interval, steps)) + geom_line() ;
ggplot(intervals_total, aes(interval, steps)) + geom_line() ;
intervals_total <- data2 %>% group_by(interval, day) %>% summarise(steps=mean(steps));
ggplot(intervals_total, aes(interval, steps)) + geom_line() ;
intervals_total
ggplot(intervals_total, aes(interval, steps)) + geom_line() ;
ggplot(intervals_total, aes(interval)) + geom_line() ;
ggplot(intervals_total, aes(steps)) + geom_line() ;
ggplot(intervals_total, aes(steps, interval)) + geom_line() ;
str(intervals_total)
dplyr::as_data_frame(intervals_total)
as_data_frame(intervals_total)
str(as_data_frame(intervals_total))
